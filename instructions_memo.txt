https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-2017&pivots=cs1-bash
docker pull microsoft/mssql-server-linux
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=!5F&svw1234' -e 'MSSQL_PID=Express' -p 1490:1433 --name=catalogdb microsoft/mssql-server-linux:latest
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=!5F&svw1234' -e 'MSSQL_PID=Express' -p 1490:1433 --name catalogdb  mcr.microsoft.com/mssql/server:2017-latest
#list active container 
docker ps -a
#remove all images
docker rm $(docker ps -a -f status=exited -f status=created -q)
#connect with sql mgnt at localhost,1490  + credentials above
sqlcmd -S localhost,1490 -U SA -P '!5F&svw1234'
select name from sys.databases
go
#it: interactive command
docker exec -it catalogdb /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '!5F&svw1234' -Q 'SELECT @@VERSION'
# Microsoft.EntityFrameworkCore.Tools -Version 2.2.4, Enables these commonly used commands:
Add-Migration
Drop-Database
Get-DbContext
Scaffold-DbContext
Script-Migrations
Update-Database

#first migrations 
 dotnet ef migrations add  intialmigrations -o .\Data\Migrations -c ProductCatalogApi.Data.CatalogDbContext
 dotnet ef migrations remove
 #apply migration to the db
 dotnet ef database update intialmigrations  -c ProductCatalogApi.Data.CatalogDbContext

 #Why not putting the seeder inside the configure method in the startup class for dockerized system?
 The configure method in the startup class is devoted to operate in the middleware pipeline! (aka components chain),
 unlike in non dockerized system where we could call the seeder inside configure method, and due the problem encountered by Core,
 the database might not ready in dockerized systems, for that reason Core 2.0 + recommends to inject directly
 the db context for seeding in the program class (main methods).

#Swagger : https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/README-v5.md
